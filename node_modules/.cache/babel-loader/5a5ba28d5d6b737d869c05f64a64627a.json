{"ast":null,"code":"import { useWallet, useConnection } from \"@solana/wallet-adapter-react\";\nimport { Connection, SystemProgram, Transaction, PublicKey, TransactionInstruction } from \"@solana/web3.js\";\nimport { deserialize, serialize } from \"borsh\";\nconst programId = new PublicKey(\"HASnazXkmntuxRjsvYZGi14xynYKAYdnV6NfpPVhS8JK\");\nexport async function setPayerAndBlockhashTransaction(wallet, connection, instructions) {\n  const transaction = new Transaction();\n  instructions.forEach(element => {\n    transaction.add(element);\n  });\n  transaction.feePayer = wallet.publicKey;\n  let hash = await connection.getRecentBlockhash();\n  transaction.recentBlockhash = hash.blockhash;\n  return transaction;\n}\nexport async function signAndSendTransaction(wallet, connection, transaction) {\n  try {\n    console.log(\"start signAndSendTransaction\");\n    let signedTrans = await wallet.signTransaction(transaction);\n    console.log(\"signed transaction\");\n    let signature = await connection.sendRawTransaction(signedTrans.serialize());\n    console.log(\"end signAndSendTransaction\");\n    return signature;\n  } catch (err) {\n    console.log(\"signAndSendTransaction error\", err);\n    throw err;\n  }\n}\nexport class CampaignDetails {\n  constructor(properties) {\n    Object.keys(properties).forEach(key => {\n      this[key] = properties[key];\n    });\n  }\n\n}\nCampaignDetails.schema = new Map([[CampaignDetails, {\n  kind: 'struct',\n  fields: [['admin', [32]], ['name', 'string'], ['description', 'string'], ['image_link', 'string'], ['amount_donated', 'u64']]\n}]]);\nexport async function createCampaign(wallet, connection, name, description, image_link) {\n  const SEED = \"abcdef\" + Math.random().toString();\n  let newAccount = await PublicKey.createWithSeed(wallet.publicKey, SEED, programId);\n  let campaign = new CampaignDetails({\n    name: name,\n    description: description,\n    image_link: image_link,\n    admin: wallet.publicKey.toBuffer(),\n    // admin: wallet.publicKey\n    amount_donated: 0\n  });\n  let data = serialize(CampaignDetails.schema, campaign);\n  let data_to_send = new Uint8Array([0, ...data]);\n  const lamports = await connection.getMinimumBalanceForRentExemption(data.length);\n  console.log(data.length);\n  const createProgramAccount = SystemProgram.createAccountWithSeed({\n    fromPubkey: wallet.publicKey,\n    basePubkey: wallet.publicKey,\n    seed: SEED,\n    newAccountPubkey: newAccount,\n    lamports: lamports,\n    space: data.length,\n    programId: programId\n  });\n  const instructionTOOurProgram = new TransactionInstruction({\n    keys: [{\n      pubkey: newAccount,\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: wallet.publicKey,\n      isSigner: true\n    }],\n    programId: programId,\n    data: data_to_send\n  });\n  const trans = await setPayerAndBlockhashTransaction(wallet, connection, [createProgramAccount, instructionTOOurProgram]);\n  const signature = await signAndSendTransaction(wallet, connection, trans);\n  const result = await connection.confirmTransaction(signature);\n  console.log(\"end sendMessage\", result);\n}\nexport async function getAllCampaigns(connection) {\n  let accounts = await connection.getProgramAccounts(programId);\n  let x = [];\n  accounts.forEach(e => {\n    try {\n      let campData = deserialize(CampaignDetails.schema, CampaignDetails, e.account.data);\n      x.push({\n        pubId: e.pubkey,\n        name: campData.name,\n        description: campData.description,\n        image_link: campData.image_link,\n        amount_donated: campData.amount_donated,\n        admin: campData.admin\n      });\n    } catch (err) {\n      console.log(err);\n    }\n  });\n  return x;\n}\nexport async function donateToCampaign(wallet, connection, campaignPubKey, amount) {\n  const SEED = \"abcdef\" + Math.random().toString();\n  let newAccount = await PublicKey.createWithSeed(wallet.publicKey, SEED, programId);\n  const createProgramAccount = SystemProgram.createAccountWithSeed({\n    fromPubkey: wallet.publicKey,\n    basePubkey: wallet.publicKey,\n    seed: SEED,\n    newAccountPubkey: newAccount,\n    lamports: amount,\n    space: 1,\n    programId: programId\n  });\n  const instructionTOOurProgram = new TransactionInstruction({\n    keys: [{\n      pubkey: campaignPubKey,\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: newAccount,\n      isSigner: false\n    }, {\n      pubkey: wallet.publicKey,\n      isSigner: true\n    }],\n    programId: programId,\n    data: new Uint8Array([2])\n  });\n  const trans = await setPayerAndBlockhashTransaction(wallet, connection, [createProgramAccount, instructionTOOurProgram]);\n  const signature = await signAndSendTransaction(wallet, connection, trans);\n  const result = await connection.confirmTransaction(signature);\n  console.log(\"end sendMessage\", result);\n}\n\nclass WithdrawRequest {\n  constructor(properties) {\n    Object.keys(properties).forEach(key => {\n      this[key] = properties[key];\n    });\n  }\n\n}\n\nWithdrawRequest.schema = new Map([[WithdrawRequest, {\n  kind: 'struct',\n  fields: [['amount', 'u64']]\n}]]);\nexport async function withdraw(wallet, connection, campaignPubKey, amount) {\n  let withdrawRequest = new WithdrawRequest({\n    amount: amount\n  });\n  let data = serialize(WithdrawRequest.schema, withdrawRequest);\n  let data_to_send = new Uint8Array([1, ...data]);\n  const instructionTOOurProgram = new TransactionInstruction({\n    keys: [{\n      pubkey: campaignPubKey,\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: wallet.publicKey,\n      isSigner: true\n    }],\n    programId: programId,\n    data: data_to_send\n  });\n  const trans = await setPayerAndBlockhashTransaction(wallet, connection, [instructionTOOurProgram]);\n  const signature = await signAndSendTransaction(wallet, connection, trans);\n  const result = await connection.confirmTransaction(signature);\n  console.log(\"end sendMessage\", result);\n}","map":{"version":3,"sources":["/Users/bryan/solana-crowdfunding/src/solana/index.js"],"names":["useWallet","useConnection","Connection","SystemProgram","Transaction","PublicKey","TransactionInstruction","deserialize","serialize","programId","setPayerAndBlockhashTransaction","wallet","connection","instructions","transaction","forEach","element","add","feePayer","publicKey","hash","getRecentBlockhash","recentBlockhash","blockhash","signAndSendTransaction","console","log","signedTrans","signTransaction","signature","sendRawTransaction","err","CampaignDetails","constructor","properties","Object","keys","key","schema","Map","kind","fields","createCampaign","name","description","image_link","SEED","Math","random","toString","newAccount","createWithSeed","campaign","admin","toBuffer","amount_donated","data","data_to_send","Uint8Array","lamports","getMinimumBalanceForRentExemption","length","createProgramAccount","createAccountWithSeed","fromPubkey","basePubkey","seed","newAccountPubkey","space","instructionTOOurProgram","pubkey","isSigner","isWritable","trans","result","confirmTransaction","getAllCampaigns","accounts","getProgramAccounts","x","e","campData","account","push","pubId","donateToCampaign","campaignPubKey","amount","WithdrawRequest","withdraw","withdrawRequest"],"mappings":"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","sourcesContent":["import { useWallet, useConnection } from \"@solana/wallet-adapter-react\";\nimport {\n    Connection,\n    SystemProgram,\n    Transaction,\n    PublicKey,\n    TransactionInstruction\n} from \"@solana/web3.js\";\nimport { deserialize, serialize } from \"borsh\";\n\nconst programId = new PublicKey(\n    \"HASnazXkmntuxRjsvYZGi14xynYKAYdnV6NfpPVhS8JK\"\n);\n\nexport async function setPayerAndBlockhashTransaction(wallet, connection,\n    instructions\n) {\n    const transaction = new Transaction();\n    instructions.forEach(element => {\n        transaction.add(element);\n    });\n    transaction.feePayer = wallet.publicKey;\n    let hash = await connection.getRecentBlockhash();\n    transaction.recentBlockhash = hash.blockhash;\n    return transaction;\n}\n\nexport async function signAndSendTransaction(wallet, connection, \n    transaction\n) {\n    try {\n        console.log(\"start signAndSendTransaction\");\n        let signedTrans = await wallet.signTransaction(transaction);\n        console.log(\"signed transaction\");\n        let signature = await connection.sendRawTransaction(\n            signedTrans.serialize()\n        );\n        console.log(\"end signAndSendTransaction\");\n        return signature;\n    } catch (err) {\n        console.log(\"signAndSendTransaction error\", err);\n        throw err;\n    }\n}\n\nexport class CampaignDetails {\n    constructor(properties) {\n        Object.keys(properties).forEach((key) => {\n            this[key] = properties[key];\n        });\n    }\n    static schema = new Map([[CampaignDetails,\n        {\n            kind: 'struct',\n            fields: [\n                ['admin', [32]],\n                ['name', 'string'],\n                ['description', 'string'],\n                ['image_link', 'string'],\n                ['amount_donated', 'u64']]\n        }]]);\n}\n\nexport async function createCampaign(wallet, connection, name, description, image_link) {\n    const SEED = \"abcdef\" + Math.random().toString();\n    let newAccount = await PublicKey.createWithSeed(\n        wallet.publicKey,\n        SEED,\n        programId\n    );\n\n    let campaign = new CampaignDetails({\n        name: name,\n        description: description,\n        image_link: image_link,\n        admin: wallet.publicKey.toBuffer(), // admin: wallet.publicKey\n        amount_donated: 0\n    })\n\n    let data = serialize(CampaignDetails.schema, campaign);\n    let data_to_send = new Uint8Array([0, ...data]);\n\n    const lamports =\n        (await connection.getMinimumBalanceForRentExemption(data.length));\n    console.log(data.length);\n    const createProgramAccount = SystemProgram.createAccountWithSeed({\n        fromPubkey: wallet.publicKey,\n        basePubkey: wallet.publicKey,\n        seed: SEED,\n        newAccountPubkey: newAccount,\n        lamports: lamports,\n        space: data.length,\n        programId: programId,\n    });\n\n    const instructionTOOurProgram = new TransactionInstruction({\n        keys: [\n            { pubkey: newAccount, isSigner: false, isWritable: true },\n            { pubkey: wallet.publicKey, isSigner: true, }\n        ],\n        programId: programId,\n        data: data_to_send,\n    });\n\n    const trans = await setPayerAndBlockhashTransaction(wallet, connection,\n        [createProgramAccount, instructionTOOurProgram]\n    );\n    const signature = await signAndSendTransaction(wallet, connection, trans);\n    const result = await connection.confirmTransaction(signature);\n    console.log(\"end sendMessage\", result);\n}\n\n\nexport async function getAllCampaigns(connection) {\n    let accounts = await connection.getProgramAccounts(programId);\n    let x = []\n    accounts.forEach((e) => {\n        try {\n            let campData = deserialize(CampaignDetails.schema, CampaignDetails, e.account.data);\n            x.push({\n                pubId: e.pubkey,\n                name: campData.name,\n                description: campData.description,\n                image_link: campData.image_link,\n                amount_donated: campData.amount_donated,\n                admin: campData.admin,\n            });\n        } catch (err) {\n            console.log(err);\n        }\n    });\n    return x;\n}\n\n\n\nexport async function donateToCampaign(wallet, connection,\n    campaignPubKey, amount\n) {\n\n    const SEED = \"abcdef\" + Math.random().toString();\n    let newAccount = await PublicKey.createWithSeed(\n        wallet.publicKey,\n        SEED,\n        programId\n    );\n\n    const createProgramAccount = SystemProgram.createAccountWithSeed({\n        fromPubkey: wallet.publicKey,\n        basePubkey: wallet.publicKey,\n        seed: SEED,\n        newAccountPubkey: newAccount,\n        lamports: amount,\n        space: 1,\n        programId: programId,\n    });\n\n    const instructionTOOurProgram = new TransactionInstruction({\n        keys: [\n            { pubkey: campaignPubKey, isSigner: false, isWritable: true },\n            { pubkey: newAccount, isSigner: false, },\n            { pubkey: wallet.publicKey, isSigner: true, }\n        ],\n        programId: programId,\n        data: new Uint8Array([2])\n    });\n\n    const trans = await setPayerAndBlockhashTransaction(wallet, connection,\n        [createProgramAccount, instructionTOOurProgram]\n    );\n    const signature = await signAndSendTransaction(wallet, connection, trans);\n    const result = await connection.confirmTransaction(signature);\n    console.log(\"end sendMessage\", result);\n}\n\nclass WithdrawRequest {\n    constructor(properties) {\n        Object.keys(properties).forEach((key) => {\n            this[key] = properties[key];\n        });\n    }\n    static schema = new Map([[WithdrawRequest,\n        {\n            kind: 'struct',\n            fields: [\n                ['amount', 'u64'],\n            ]\n        }]]);\n\n}\n\nexport async function withdraw(wallet, connection,\n    campaignPubKey, amount\n) {\n    let withdrawRequest = new WithdrawRequest({ amount: amount });\n    let data = serialize(WithdrawRequest.schema, withdrawRequest);\n    let data_to_send = new Uint8Array([1, ...data]);\n\n    const instructionTOOurProgram = new TransactionInstruction({\n        keys: [\n            { pubkey: campaignPubKey, isSigner: false, isWritable: true },\n            { pubkey: wallet.publicKey, isSigner: true, }\n        ],\n        programId: programId,\n        data: data_to_send\n    });\n    const trans = await setPayerAndBlockhashTransaction(wallet, connection,\n        [instructionTOOurProgram]\n    );\n    const signature = await signAndSendTransaction(wallet, connection, trans);\n    const result = await connection.confirmTransaction(signature);\n    console.log(\"end sendMessage\", result);\n}"]},"metadata":{},"sourceType":"module"}