{"ast":null,"code":"var _jsxFileName = \"/Users/bryan/solana-crowdfunding/src/App.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$(),\n    _s3 = $RefreshSig$();\n\nimport { React, useEffect, useState, useCallback, useMemo } from \"react\";\nimport { ChakraProvider, Box, Text, VStack, Grid, theme, Heading, HStack, Tabs, TabList, TabPanels, TabPanel, Tab, SimpleGrid, FormControl, FormLabel, Input } from \"@chakra-ui/react\";\nimport * as web3 from \"@solana/web3.js\";\nimport { ColorModeSwitcher } from \"./ColorModeSwitcher\";\nimport { ConnectionProvider, WalletProvider, useConnection, useWallet } from \"@solana/wallet-adapter-react\";\nimport { PhantomWalletAdapter, SolflareWalletAdapter, SolletExtensionWalletAdapter, SolletWalletAdapter } from '@solana/wallet-adapter-wallets';\nimport Card from './components/Card';\nimport Form from './components/Form';\nimport { getAllCampaigns } from \"./solana\";\nimport { WalletDisconnectButton, WalletModalProvider, WalletMultiButton } from \"@solana/wallet-adapter-react-ui\";\nimport Footer from \"./components/Footer\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nrequire(\"@solana/wallet-adapter-react-ui/styles.css\");\n\nfunction useSolanaAccount() {\n  _s();\n\n  const [account, setAccount] = useState(null);\n  const [transactions, setTransactions] = useState(null);\n  const {\n    connection\n  } = useConnection();\n  const {\n    publicKey\n  } = useWallet();\n  const init = useCallback(async () => {\n    if (publicKey) {\n      // get account info from the network\n      let acc = await connection.getAccountInfo(publicKey);\n      setAccount(acc);\n      let transactions = await connection.getConfirmedSignaturesForAddress2(publicKey, {\n        limit: 10\n      });\n      setTransactions(transactions);\n    }\n  }, [publicKey, connection]);\n  useEffect(() => {\n    if (publicKey) {\n      setInterval(init, 1000);\n    }\n  }, [init, publicKey]); // updating logic here\n\n  return {\n    account,\n    transactions\n  };\n}\n\n_s(useSolanaAccount, \"r+B1Pwggmfntyo9rZAQ4cKQtsVo=\", false, function () {\n  return [useConnection, useWallet];\n});\n\n;\n\nfunction WalletNotConnected() {\n  return /*#__PURE__*/_jsxDEV(VStack, {\n    height: \"70vh\",\n    justify: \"space-around\",\n    children: /*#__PURE__*/_jsxDEV(VStack, {\n      children: [/*#__PURE__*/_jsxDEV(Text, {\n        fontSize: \"2xl\",\n        children: [\" \", \"Looks like your wallet is not connnected. Connect a wallet to get started!\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(WalletMultiButton, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 81,\n    columnNumber: 5\n  }, this);\n}\n\n_c = WalletNotConnected;\n\nfunction Home() {\n  _s2();\n\n  // States\n  const {\n    connection\n  } = useConnection();\n  const {\n    publicKey\n  } = useWallet();\n  const {\n    account\n  } = useSolanaAccount();\n  const [route, setRoute] = useState(0);\n  const [cards, setCards] = useState([]);\n  useEffect(() => {\n    getAllCampaigns(connection).then(val => {\n      setCards(val);\n      console.log(val);\n    });\n  }, []);\n  return /*#__PURE__*/_jsxDEV(Box, {\n    textAlign: \"center\",\n    fontSize: \"xl\",\n    children: /*#__PURE__*/_jsxDEV(Grid, {\n      minH: \"100vh\",\n      p: 20,\n      children: /*#__PURE__*/_jsxDEV(Tabs, {\n        variant: \"soft-rounded\",\n        colorScheme: \"purple\",\n        children: [/*#__PURE__*/_jsxDEV(TabList, {\n          width: \"full\",\n          mb: 10,\n          children: /*#__PURE__*/_jsxDEV(HStack, {\n            justify: \"space-between\",\n            width: \"full\",\n            children: [/*#__PURE__*/_jsxDEV(HStack, {\n              children: [/*#__PURE__*/_jsxDEV(Tab, {\n                children: \"Discover\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 115,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(Tab, {\n                children: \"Start a campaign\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 116,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 114,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(HStack, {\n              children: [publicKey && /*#__PURE__*/_jsxDEV(WalletDisconnectButton, {\n                bg: \"green\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 119,\n                columnNumber: 31\n              }, this), /*#__PURE__*/_jsxDEV(ColorModeSwitcher, {\n                justifySelf: \"flex-end\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 120,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 118,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 113,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 112,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(TabPanels, {\n          children: [/*#__PURE__*/_jsxDEV(TabPanel, {\n            children: [publicKey && /*#__PURE__*/_jsxDEV(Box, {\n              children: [/*#__PURE__*/_jsxDEV(VStack, {\n                width: 80,\n                spacing: 8,\n                borderRadius: 10,\n                borderWidth: 2,\n                p: 10,\n                children: [/*#__PURE__*/_jsxDEV(FormControl, {\n                  id: \"pubkey\",\n                  children: [/*#__PURE__*/_jsxDEV(FormLabel, {\n                    children: \"Wallet Public Key:\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 130,\n                    columnNumber: 23\n                  }, this), /*#__PURE__*/_jsxDEV(Input, {\n                    type: \"text\",\n                    value: publicKey.toBase58(),\n                    readOnly: true\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 131,\n                    columnNumber: 23\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 129,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(FormControl, {\n                  id: \"balance\",\n                  children: [/*#__PURE__*/_jsxDEV(FormLabel, {\n                    children: \"Balance\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 134,\n                    columnNumber: 23\n                  }, this), /*#__PURE__*/_jsxDEV(Input, {\n                    type: \"text\",\n                    value: account ? account.lamports / web3.LAMPORTS_PER_SOL : 'Loading..',\n                    readOnly: true\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 135,\n                    columnNumber: 23\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 133,\n                  columnNumber: 21\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 128,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(VStack, {\n                mt: 20,\n                spacing: 8,\n                children: [/*#__PURE__*/_jsxDEV(Heading, {\n                  children: \"Discover\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 146,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(SimpleGrid, {\n                  columns: [1, null, 2],\n                  spacing: 12,\n                  children: cards.map((e, idx) => /*#__PURE__*/_jsxDEV(Card, {\n                    data: {\n                      title: e.name,\n                      description: e.description,\n                      amount: e.amount_donated.toString(),\n                      image: e.image_link,\n                      id: e.pubId,\n                      admin: e.admin\n                    },\n                    setCards: setCards\n                  }, e.pubId.toString(), false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 151,\n                    columnNumber: 27\n                  }, this))\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 149,\n                  columnNumber: 23\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 145,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 127,\n              columnNumber: 17\n            }, this), !publicKey && /*#__PURE__*/_jsxDEV(WalletNotConnected, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 167,\n              columnNumber: 30\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 125,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(TabPanel, {\n            children: [publicKey && /*#__PURE__*/_jsxDEV(VStack, {\n              spacing: 8,\n              children: [/*#__PURE__*/_jsxDEV(Heading, {\n                children: \"Start a campaign\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 173,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(Form, {\n                setRoute: e => {\n                  setRoute(e);\n                  getAllCampaigns(connection).then(val => {\n                    setCards(val);\n                  });\n                }\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 174,\n                columnNumber: 21\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 172,\n              columnNumber: 17\n            }, this), !publicKey && /*#__PURE__*/_jsxDEV(WalletNotConnected, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 182,\n              columnNumber: 30\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 170,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 124,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 109,\n    columnNumber: 5\n  }, this);\n}\n\n_s2(Home, \"ZEALkp/++PslJIUcvTrHUgqGMVg=\", false, function () {\n  return [useConnection, useWallet, useSolanaAccount];\n});\n\n_c2 = Home;\n\nfunction App() {\n  _s3();\n\n  const opts = {\n    preflightCommitment: \"processed\"\n  };\n  const network = \"devnet\";\n  const endpoint = web3.clusterApiUrl(network);\n  const wallets = useMemo(() => [new PhantomWalletAdapter(), new SolflareWalletAdapter(), new SolletWalletAdapter({\n    network\n  }), new SolletExtensionWalletAdapter({\n    network\n  })], [network]);\n  return /*#__PURE__*/_jsxDEV(ChakraProvider, {\n    theme: theme,\n    children: /*#__PURE__*/_jsxDEV(ConnectionProvider, {\n      endpoint: endpoint,\n      children: /*#__PURE__*/_jsxDEV(WalletProvider, {\n        wallets: wallets,\n        autoConnect: true,\n        children: /*#__PURE__*/_jsxDEV(WalletModalProvider, {\n          children: /*#__PURE__*/_jsxDEV(Home, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 212,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 211,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 210,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 209,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 208,\n    columnNumber: 5\n  }, this);\n}\n\n_s3(App, \"W9IgGN+f7P4ScyFu7AdMyjvnXHI=\");\n\n_c3 = App;\nexport default App;\n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"WalletNotConnected\");\n$RefreshReg$(_c2, \"Home\");\n$RefreshReg$(_c3, \"App\");","map":{"version":3,"sources":["/Users/bryan/solana-crowdfunding/src/App.js"],"names":["React","useEffect","useState","useCallback","useMemo","ChakraProvider","Box","Text","VStack","Grid","theme","Heading","HStack","Tabs","TabList","TabPanels","TabPanel","Tab","SimpleGrid","FormControl","FormLabel","Input","web3","ColorModeSwitcher","ConnectionProvider","WalletProvider","useConnection","useWallet","PhantomWalletAdapter","SolflareWalletAdapter","SolletExtensionWalletAdapter","SolletWalletAdapter","Card","Form","getAllCampaigns","WalletDisconnectButton","WalletModalProvider","WalletMultiButton","Footer","require","useSolanaAccount","account","setAccount","transactions","setTransactions","connection","publicKey","init","acc","getAccountInfo","getConfirmedSignaturesForAddress2","limit","setInterval","WalletNotConnected","Home","route","setRoute","cards","setCards","then","val","console","log","toBase58","lamports","LAMPORTS_PER_SOL","map","e","idx","title","name","description","amount","amount_donated","toString","image","image_link","id","pubId","admin","App","opts","preflightCommitment","network","endpoint","clusterApiUrl","wallets"],"mappings":"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","sourcesContent":["import { React, useEffect, useState, useCallback, useMemo } from \"react\";\nimport {\n  ChakraProvider,\n  Box,\n  Text,\n  VStack,\n  Grid,\n  theme,\n  Heading,\n  HStack,\n  Tabs,\n  TabList,\n  TabPanels,\n  TabPanel,\n  Tab,\n  SimpleGrid,\n  FormControl,\n  FormLabel,\n  Input,\n} from \"@chakra-ui/react\";\nimport * as web3 from \"@solana/web3.js\";\nimport { ColorModeSwitcher } from \"./ColorModeSwitcher\";\nimport {\n  ConnectionProvider,\n  WalletProvider,\n  useConnection,\n  useWallet,\n} from \"@solana/wallet-adapter-react\";\nimport {\n  PhantomWalletAdapter,\n  SolflareWalletAdapter,\n  SolletExtensionWalletAdapter,\n  SolletWalletAdapter,\n} from '@solana/wallet-adapter-wallets';\n\nimport Card from './components/Card';\nimport Form from './components/Form';\nimport { getAllCampaigns } from \"./solana\";\nimport {\n  WalletDisconnectButton,\n  WalletModalProvider,\n  WalletMultiButton,\n} from \"@solana/wallet-adapter-react-ui\";\nimport Footer from \"./components/Footer\";\nrequire(\"@solana/wallet-adapter-react-ui/styles.css\");\n\n\nfunction useSolanaAccount() {\n  const [account, setAccount] = useState(null);\n  const [transactions, setTransactions] = useState(null);\n  const { connection } = useConnection();\n  const { publicKey } = useWallet();\n\n  const init = useCallback(async () => {\n    if (publicKey) {\n      // get account info from the network\n      let acc = await connection.getAccountInfo(publicKey);\n      setAccount(acc);\n      let transactions = await connection.getConfirmedSignaturesForAddress2(\n        publicKey,\n        {\n          limit: 10,\n        }\n      );\n      setTransactions(transactions);\n    }\n  }, [publicKey, connection]);\n\n  useEffect(() => {\n    if (publicKey) {\n      setInterval(init, 1000);\n    }\n  }, [init, publicKey]);\n\n  // updating logic here\n  return { account, transactions };\n};\n\nfunction WalletNotConnected() {\n  return (\n    <VStack height=\"70vh\" justify=\"space-around\">\n      <VStack>\n        <Text fontSize=\"2xl\">\n          {\" \"}\n          Looks like your wallet is not connnected. Connect a wallet to get started!\n        </Text>\n        <WalletMultiButton />\n      </VStack>\n    </VStack>\n  );\n}\n\nfunction Home() {\n    // States\n  const { connection } = useConnection();\n  const { publicKey } = useWallet();\n  const { account } = useSolanaAccount();\n  const [route, setRoute] = useState(0);\n  const [cards, setCards] = useState([]);\n  \n  useEffect(() => {\n    getAllCampaigns(connection).then((val) => {\n      setCards(val);\n      console.log(val);\n    });\n  }, []);\n\n  return (\n    <Box textAlign=\"center\" fontSize=\"xl\">\n      <Grid minH=\"100vh\" p={20}>\n        <Tabs variant=\"soft-rounded\" colorScheme=\"purple\">\n          <TabList width=\"full\" mb={10}>\n            <HStack justify=\"space-between\" width=\"full\">\n              <HStack>\n                <Tab>Discover</Tab>\n                <Tab>Start a campaign</Tab>\n              </HStack>\n              <HStack>\n                {publicKey && <WalletDisconnectButton bg=\"green\" />}\n                <ColorModeSwitcher justifySelf=\"flex-end\" />\n              </HStack>\n            </HStack>\n          </TabList>\n          <TabPanels>\n            <TabPanel>\n              {publicKey && (\n                <Box>\n                  <VStack width={80} spacing={8} borderRadius={10} borderWidth={2} p={10}>\n                    <FormControl id=\"pubkey\">\n                      <FormLabel>Wallet Public Key:</FormLabel>\n                      <Input type=\"text\" value={publicKey.toBase58()} readOnly/>\n                    </FormControl>\n                    <FormControl id=\"balance\">\n                      <FormLabel>Balance</FormLabel>\n                      <Input \n                        type=\"text\" \n                        value={account \n                          ? account.lamports / web3.LAMPORTS_PER_SOL\n                          : 'Loading..'\n                        }\n                        readOnly\n                      />\n                    </FormControl>\n                  </VStack>\n                  <VStack mt={20} spacing={8}>\n                    <Heading>Discover</Heading>\n                      {/* Mobile responsive grid */}\n                      {/* Passing `columns={[2, null, 3]}` is same as `columns={{sm: 2, md: 3}}` */}\n                      <SimpleGrid columns={[1,null,2]} spacing={12}>\n                        {cards.map((e, idx) => (\n                          <Card\n                            key={e.pubId.toString()}\n                            data={{\n                              title: e.name,\n                              description: e.description,\n                              amount: (e.amount_donated).toString(),\n                              image: e.image_link,\n                              id: e.pubId,\n                              admin: e.admin,\n                            }}\n                            setCards={setCards} />\n                        ))}\n                      </SimpleGrid>\n                  </VStack>\n                </Box>\n              )}\n              {!publicKey && <WalletNotConnected />}\n            </TabPanel>\n            \n            <TabPanel>\n              {publicKey && (\n                <VStack spacing={8}>\n                  <Heading>Start a campaign</Heading>\n                    <Form setRoute={(e) => {\n                      setRoute(e);\n                      getAllCampaigns(connection).then((val) => {\n                        setCards(val);\n                      });\n                    }} />\n                </VStack>\n              )}\n              {!publicKey && <WalletNotConnected />}\n            </TabPanel>\n          </TabPanels>\n        </Tabs>\n      </Grid>\n    </Box>\n  );\n}\n\nfunction App() {\n  const opts = {\n    preflightCommitment: \"processed\"\n  }\n  const network = \"devnet\";\n  const endpoint = web3.clusterApiUrl(network);\n  const wallets = useMemo(\n    () => [\n      new PhantomWalletAdapter(),\n      new SolflareWalletAdapter(),\n      new SolletWalletAdapter({ network }),\n      new SolletExtensionWalletAdapter({ network }),\n    ],\n    [network]\n  );\n\n  return (\n    <ChakraProvider theme={theme}>\n      <ConnectionProvider endpoint={endpoint}>\n        <WalletProvider wallets={wallets} autoConnect>\n          <WalletModalProvider>\n            <Home></Home>\n          </WalletModalProvider>\n        </WalletProvider>\n      </ConnectionProvider>\n    </ChakraProvider>\n  );\n}\n\nexport default App;"]},"metadata":{},"sourceType":"module"}