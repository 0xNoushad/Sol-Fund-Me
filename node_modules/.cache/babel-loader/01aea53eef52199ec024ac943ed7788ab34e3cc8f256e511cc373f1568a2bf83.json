{"ast":null,"code":"var _CampaignDetails, _WithdrawRequest;\nimport { useWallet, useConnection } from \"@solana/wallet-adapter-react\";\nimport { Connection, SystemProgram, Transaction, PublicKey, TransactionInstruction } from \"@solana/web3.js\";\nimport { deserialize, serialize } from \"borsh\";\nconst programId = new PublicKey(\"HASnazXkmntuxRjsvYZGi14xynYKAYdnV6NfpPVhS8JK\");\nexport async function setPayerAndBlockhashTransaction(wallet, connection, instructions) {\n  const transaction = new Transaction();\n  instructions.forEach(element => {\n    transaction.add(element);\n  });\n  transaction.feePayer = wallet.publicKey;\n  let hash = await connection.getRecentBlockhash();\n  transaction.recentBlockhash = hash.blockhash;\n  return transaction;\n}\nexport async function signAndSendTransaction(wallet, connection, transaction) {\n  try {\n    console.log(\"start signAndSendTransaction\");\n    let signedTrans = await wallet.signTransaction(transaction);\n    console.log(\"signed transaction\");\n    let signature = await connection.sendRawTransaction(signedTrans.serialize());\n    console.log(\"end signAndSendTransaction\");\n    return signature;\n  } catch (err) {\n    console.log(\"signAndSendTransaction error\", err);\n    throw err;\n  }\n}\n\n// Implementation of the Rust struct 'CampaignDetails'\nexport class CampaignDetails {\n  constructor(properties) {\n    Object.keys(properties).forEach(key => {\n      this[key] = properties[key];\n    });\n  }\n}\n_CampaignDetails = CampaignDetails;\nCampaignDetails.schema = new Map([[_CampaignDetails, {\n  kind: 'struct',\n  fields: [['admin', [32]], ['name', 'string'], ['description', 'string'], ['image_link', 'string'], ['amount_donated', 'u64']]\n}]]);\nexport async function createCampaign(wallet, connection, name, description, image_link) {\n  const SEED = \"abcdef\" + Math.random().toString();\n  let newAccount = await PublicKey.createWithSeed(wallet.publicKey, SEED, programId);\n  let campaign = new CampaignDetails({\n    name: name,\n    description: description,\n    image_link: image_link,\n    admin: wallet.publicKey.toBuffer(),\n    // admin: wallet.publicKey\n    amount_donated: 0\n  });\n  let data = serialize(CampaignDetails.schema, campaign);\n  let data_to_send = new Uint8Array([0, ...data]);\n  const lamports = await connection.getMinimumBalanceForRentExemption(data.length);\n  console.log(data.length);\n  // Create the instruction to create the program account\n  const createProgramAccount = SystemProgram.createAccountWithSeed({\n    fromPubkey: wallet.publicKey,\n    basePubkey: wallet.publicKey,\n    seed: SEED,\n    newAccountPubkey: newAccount,\n    lamports: lamports,\n    space: data.length,\n    programId: programId\n  });\n  const instructionTOOurProgram = new TransactionInstruction({\n    keys: [{\n      pubkey: newAccount,\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: wallet.publicKey,\n      isSigner: true\n    }],\n    programId: programId,\n    data: data_to_send\n  });\n  const trans = await setPayerAndBlockhashTransaction(wallet, connection, [createProgramAccount, instructionTOOurProgram]);\n  const signature = await signAndSendTransaction(wallet, connection, trans);\n  const result = await connection.confirmTransaction(signature);\n  console.log(\"end sendMessage\", result);\n}\nexport async function getAllCampaigns(connection) {\n  // Fetch all program accounts\n  let accounts = await connection.getProgramAccounts(programId);\n  let x = [];\n  accounts.forEach(e => {\n    try {\n      let campData = deserialize(CampaignDetails.schema, CampaignDetails, e.account.data);\n      x.push({\n        pubId: e.pubkey,\n        name: campData.name,\n        description: campData.description,\n        image_link: campData.image_link,\n        amount_donated: campData.amount_donated,\n        admin: campData.admin\n      });\n    } catch (err) {\n      console.log(err);\n    }\n  });\n  return x;\n}\nexport async function donateToCampaign(wallet, connection, campaignPubKey, amount) {\n  const SEED = \"abcdef\" + Math.random().toString();\n  let newAccount = await PublicKey.createWithSeed(wallet.publicKey, SEED, programId);\n  const createProgramAccount = SystemProgram.createAccountWithSeed({\n    fromPubkey: wallet.publicKey,\n    basePubkey: wallet.publicKey,\n    seed: SEED,\n    newAccountPubkey: newAccount,\n    lamports: amount,\n    space: 1,\n    programId: programId\n  });\n  const instructionTOOurProgram = new TransactionInstruction({\n    keys: [{\n      pubkey: campaignPubKey,\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: newAccount,\n      isSigner: false\n    }, {\n      pubkey: wallet.publicKey,\n      isSigner: true\n    }],\n    programId: programId,\n    data: new Uint8Array([2])\n  });\n  const trans = await setPayerAndBlockhashTransaction(wallet, connection, [createProgramAccount, instructionTOOurProgram]);\n  const signature = await signAndSendTransaction(wallet, connection, trans);\n  const result = await connection.confirmTransaction(signature);\n  console.log(\"end sendMessage\", result);\n}\nclass WithdrawRequest {\n  constructor(properties) {\n    Object.keys(properties).forEach(key => {\n      this[key] = properties[key];\n    });\n  }\n}\n_WithdrawRequest = WithdrawRequest;\nWithdrawRequest.schema = new Map([[_WithdrawRequest, {\n  kind: 'struct',\n  fields: [['amount', 'u64']]\n}]]);\nexport async function withdraw(wallet, connection, campaignPubKey, amount) {\n  let withdrawRequest = new WithdrawRequest({\n    amount: amount\n  });\n  let data = serialize(WithdrawRequest.schema, withdrawRequest);\n  // '1' is the entrypoint for calling 'withdraw' function\n  let data_to_send = new Uint8Array([1, ...data]);\n  const instructionTOOurProgram = new TransactionInstruction({\n    keys: [{\n      pubkey: campaignPubKey,\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: wallet.publicKey,\n      isSigner: true\n    }],\n    programId: programId,\n    data: data_to_send\n  });\n  const trans = await setPayerAndBlockhashTransaction(wallet, connection, [instructionTOOurProgram]);\n  const signature = await signAndSendTransaction(wallet, connection, trans);\n  const result = await connection.confirmTransaction(signature);\n  console.log(\"end sendMessage\", result);\n}","map":{"version":3,"names":["useWallet","useConnection","Connection","SystemProgram","Transaction","PublicKey","TransactionInstruction","deserialize","serialize","programId","setPayerAndBlockhashTransaction","wallet","connection","instructions","transaction","forEach","element","add","feePayer","publicKey","hash","getRecentBlockhash","recentBlockhash","blockhash","signAndSendTransaction","console","log","signedTrans","signTransaction","signature","sendRawTransaction","err","CampaignDetails","constructor","properties","Object","keys","key","_CampaignDetails","schema","Map","kind","fields","createCampaign","name","description","image_link","SEED","Math","random","toString","newAccount","createWithSeed","campaign","admin","toBuffer","amount_donated","data","data_to_send","Uint8Array","lamports","getMinimumBalanceForRentExemption","length","createProgramAccount","createAccountWithSeed","fromPubkey","basePubkey","seed","newAccountPubkey","space","instructionTOOurProgram","pubkey","isSigner","isWritable","trans","result","confirmTransaction","getAllCampaigns","accounts","getProgramAccounts","x","e","campData","account","push","pubId","donateToCampaign","campaignPubKey","amount","WithdrawRequest","_WithdrawRequest","withdraw","withdrawRequest"],"sources":["C:/Users/khann/OneDrive/Desktop/Future/solana-crowdfunding/src/solana/index.js"],"sourcesContent":["import { useWallet, useConnection } from \"@solana/wallet-adapter-react\";\r\nimport {\r\n    Connection,\r\n    SystemProgram,\r\n    Transaction,\r\n    PublicKey,\r\n    TransactionInstruction\r\n} from \"@solana/web3.js\";\r\nimport { deserialize, serialize } from \"borsh\";\r\n\r\nconst programId = new PublicKey(\r\n    \"HASnazXkmntuxRjsvYZGi14xynYKAYdnV6NfpPVhS8JK\"\r\n);\r\n\r\nexport async function setPayerAndBlockhashTransaction(wallet, connection,\r\n    instructions\r\n) {\r\n    const transaction = new Transaction();\r\n    instructions.forEach(element => {\r\n        transaction.add(element);\r\n    });\r\n    transaction.feePayer = wallet.publicKey;\r\n    let hash = await connection.getRecentBlockhash();\r\n    transaction.recentBlockhash = hash.blockhash;\r\n    return transaction;\r\n}\r\n\r\nexport async function signAndSendTransaction(wallet, connection, \r\n    transaction\r\n) {\r\n    try {\r\n        console.log(\"start signAndSendTransaction\");\r\n        let signedTrans = await wallet.signTransaction(transaction);\r\n        console.log(\"signed transaction\");\r\n        let signature = await connection.sendRawTransaction(\r\n            signedTrans.serialize()\r\n        );\r\n        console.log(\"end signAndSendTransaction\");\r\n        return signature;\r\n    } catch (err) {\r\n        console.log(\"signAndSendTransaction error\", err);\r\n        throw err;\r\n    }\r\n}\r\n\r\n// Implementation of the Rust struct 'CampaignDetails'\r\nexport class CampaignDetails {\r\n    constructor(properties) {\r\n        Object.keys(properties).forEach((key) => {\r\n            this[key] = properties[key];\r\n        });\r\n    }\r\n    static schema = new Map([[CampaignDetails,\r\n        {\r\n            kind: 'struct',\r\n            fields: [\r\n                ['admin', [32]],\r\n                ['name', 'string'],\r\n                ['description', 'string'],\r\n                ['image_link', 'string'],\r\n                ['amount_donated', 'u64']]\r\n        }]]);\r\n}\r\n\r\nexport async function createCampaign(wallet, connection, name, description, image_link) {\r\n    const SEED = \"abcdef\" + Math.random().toString();\r\n    let newAccount = await PublicKey.createWithSeed(\r\n        wallet.publicKey,\r\n        SEED,\r\n        programId\r\n    );\r\n\r\n    let campaign = new CampaignDetails({\r\n        name: name,\r\n        description: description,\r\n        image_link: image_link,\r\n        admin: wallet.publicKey.toBuffer(), // admin: wallet.publicKey\r\n        amount_donated: 0\r\n    })\r\n\r\n    let data = serialize(CampaignDetails.schema, campaign);\r\n    let data_to_send = new Uint8Array([0, ...data]);\r\n\r\n    const lamports =\r\n        (await connection.getMinimumBalanceForRentExemption(data.length));\r\n    console.log(data.length);\r\n    // Create the instruction to create the program account\r\n    const createProgramAccount = SystemProgram.createAccountWithSeed({\r\n        fromPubkey: wallet.publicKey,\r\n        basePubkey: wallet.publicKey,\r\n        seed: SEED,\r\n        newAccountPubkey: newAccount,\r\n        lamports: lamports,\r\n        space: data.length,\r\n        programId: programId,\r\n    });\r\n\r\n    const instructionTOOurProgram = new TransactionInstruction({\r\n        keys: [\r\n            { pubkey: newAccount, isSigner: false, isWritable: true },\r\n            { pubkey: wallet.publicKey, isSigner: true, }\r\n        ],\r\n        programId: programId,\r\n        data: data_to_send,\r\n    });\r\n\r\n    const trans = await setPayerAndBlockhashTransaction(wallet, connection,\r\n        [createProgramAccount, instructionTOOurProgram]\r\n    );\r\n    const signature = await signAndSendTransaction(wallet, connection, trans);\r\n    const result = await connection.confirmTransaction(signature);\r\n    console.log(\"end sendMessage\", result);\r\n}\r\n\r\nexport async function getAllCampaigns(connection) {\r\n    // Fetch all program accounts\r\n    let accounts = await connection.getProgramAccounts(programId);\r\n\r\n    let x = []\r\n    accounts.forEach((e) => {\r\n        try {\r\n            let campData = deserialize(CampaignDetails.schema, CampaignDetails, e.account.data);\r\n            x.push({\r\n                pubId: e.pubkey,\r\n                name: campData.name,\r\n                description: campData.description,\r\n                image_link: campData.image_link,\r\n                amount_donated: campData.amount_donated,\r\n                admin: campData.admin,\r\n            });\r\n        } catch (err) {\r\n            console.log(err);\r\n        }\r\n    });\r\n    return x;\r\n}\r\n\r\n\r\nexport async function donateToCampaign(wallet, connection,\r\n    campaignPubKey, amount\r\n) {\r\n\r\n    const SEED = \"abcdef\" + Math.random().toString();\r\n    let newAccount = await PublicKey.createWithSeed(\r\n        wallet.publicKey,\r\n        SEED,\r\n        programId\r\n    );\r\n\r\n    const createProgramAccount = SystemProgram.createAccountWithSeed({\r\n        fromPubkey: wallet.publicKey,\r\n        basePubkey: wallet.publicKey,\r\n        seed: SEED,\r\n        newAccountPubkey: newAccount,\r\n        lamports: amount,\r\n        space: 1,\r\n        programId: programId,\r\n    });\r\n\r\n    const instructionTOOurProgram = new TransactionInstruction({\r\n        keys: [\r\n            { pubkey: campaignPubKey, isSigner: false, isWritable: true },\r\n            { pubkey: newAccount, isSigner: false, },\r\n            { pubkey: wallet.publicKey, isSigner: true, }\r\n        ],\r\n        programId: programId,\r\n        data: new Uint8Array([2])\r\n    });\r\n\r\n    const trans = await setPayerAndBlockhashTransaction(wallet, connection,\r\n        [createProgramAccount, instructionTOOurProgram]\r\n    );\r\n    const signature = await signAndSendTransaction(wallet, connection, trans);\r\n    const result = await connection.confirmTransaction(signature);\r\n    console.log(\"end sendMessage\", result);\r\n}\r\n\r\nclass WithdrawRequest {\r\n    constructor(properties) {\r\n        Object.keys(properties).forEach((key) => {\r\n            this[key] = properties[key];\r\n        });\r\n    }\r\n    static schema = new Map([[WithdrawRequest,\r\n        {\r\n            kind: 'struct',\r\n            fields: [\r\n                ['amount', 'u64'],\r\n            ]\r\n        }]]);\r\n\r\n}\r\n\r\nexport async function withdraw(wallet, connection,\r\n    campaignPubKey, amount\r\n) {\r\n    let withdrawRequest = new WithdrawRequest({ amount: amount });\r\n    let data = serialize(WithdrawRequest.schema, withdrawRequest);\r\n    // '1' is the entrypoint for calling 'withdraw' function\r\n    let data_to_send = new Uint8Array([1, ...data]);\r\n\r\n    const instructionTOOurProgram = new TransactionInstruction({\r\n        keys: [\r\n            { pubkey: campaignPubKey, isSigner: false, isWritable: true },\r\n            { pubkey: wallet.publicKey, isSigner: true, }\r\n        ],\r\n        programId: programId,\r\n        data: data_to_send\r\n    });\r\n    const trans = await setPayerAndBlockhashTransaction(wallet, connection,\r\n        [instructionTOOurProgram]\r\n    );\r\n    const signature = await signAndSendTransaction(wallet, connection, trans);\r\n    const result = await connection.confirmTransaction(signature);\r\n    console.log(\"end sendMessage\", result);\r\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}